# defmodule App.PlanetsTest do
#   use App.DataCase

#   alias App.{Repo, Planets}
#   alias App.Planets.Planet

#   # Ensure a clean slate before each test
#   setup do
#     Repo.delete_all(Planet)
#     :ok
#   end

#   describe "list_planets" do
#     setup do
#       Repo.insert!(%Planet{id: 1, name: "B", distance: 1.0, orbital_period: 1.0})
#       Repo.insert!(%Planet{id: 2, name: "A", distance: 1.5, orbital_period: 1.5})
#       %{}
#     end

#     test "/0 returns all planets" do
#       planets = Planets.list_planets() |> Enum.sort_by(& &1.id)
#       assert [%Planet{id: id1}, %Planet{id: id2}] = planets
#       assert id1 == 1
#       assert id2 == 2
#     end

#     test "/1 lists planets sorted alphabetically" do
#       assert [%Planet{name: "A"}, %Planet{name: "B"}] = Planets.list_planets(:sorted_by_name)
#     end
#   end

#   test "create_planet/1 creates a planet with valid inputs" do
#     assert [] = Planets.list_planets()
#     Planets.create_planet(%{name: "A", distance: 1.0, orbital_period: 1.0})
#     assert [%Planet{name: "A"}] = Planets.list_planets()
#   end

#   test "create_planet/1 does not create a planet with invalid inputs" do
#     assert [] = Planets.list_planets()

#     assert {:error,
#             %Ecto.Changeset{
#               valid?: false,
#               errors: errors
#             }} = Planets.create_planet(%{distance: -1.0, orbital_period: 0})

#     assert [] = Planets.list_planets()

#     assert {:name, {"can't be blank", _}} = List.keyfind(errors, :name, 0)
#     assert {:distance, {"must be greater than %{number}", _}} = List.keyfind(errors, :distance, 0)

#     assert {:orbital_period, {"must be greater than %{number}", _}} =
#             List.keyfind(errors, :orbital_period, 0)
#   end

#   test "delete/1 deletes a planet struct" do
#     _planet = Repo.insert!(%Planet{name: "B", distance: 1.0, orbital_period: 1.0})

#     [planet] = Planets.list_planets()

#     {:ok, _planet} = Planets.delete_planet(planet)
#     [] = Planets.list_planets()
#   end

#   # TODO uncomment and complete the following tests

#   test "get_planet/1 gets a planet by id" do
#     planet = Repo.insert!(%Planet{id: 999, name: "A", distance: 1.0, orbital_period: 1.0})
#     assert planet == Planets.get_planet(999)
#   end

#   test "get_planet/1 returns nil if no planet with the given id exists" do
#     assert nil == Planets.get_planet(-1)
#   end

#   test "get_random_planet/1 gets a planet randomly" do
#     Repo.insert!(%Planet{name: "Earth", distance: 1.0, orbital_period: 1.0})
#     Repo.insert!(%Planet{name: "Mars", distance: 1.52, orbital_period: 1.88})
#     assert %Planet{} = Planets.get_random_planet()
#   end

#   test "update_planet/2 updates a planet struct with valid attrs" do
#     planet = Repo.insert!(%Planet{name: "OldName", distance: 1.0, orbital_period: 1.0})
#     {:ok, updated_planet} = Planets.update_planet(planet, %{name: "NewName"})
#     assert updated_planet.name == "NewName"
#   end

#   test "update_planet/2 doesn't update a planet struct with invalid attrs" do
#     planet = Repo.insert!(%Planet{name: "A", distance: 1.0, orbital_period: 1.0})
#     {:error, changeset} = Planets.update_planet(planet, %{distance: -5.0})
#     assert changeset.valid? == false
#   end
# end
