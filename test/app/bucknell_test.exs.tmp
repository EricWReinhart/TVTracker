# defmodule App.BucknellTest do
#   use App.DataCase

#   alias App.Bucknell

#   describe "courses" do
#     alias App.Bucknell.Course

#     import App.BucknellFixtures

#     @invalid_attrs %{name: nil, semester: nil}

#     test "list_courses/0 returns all courses" do
#       course = course_fixture()
#       assert Bucknell.list_courses() == [course]
#     end

#     test "get_course!/1 returns the course with given id" do
#       course = course_fixture()
#       assert Bucknell.get_course!(course.id) == course
#     end

#     test "create_course/1 with valid data creates a course" do
#       valid_attrs = %{name: "some name", semester: "some semester"}

#       assert {:ok, %Course{} = course} = Bucknell.create_course(valid_attrs)
#       assert course.name == "some name"
#       assert course.semester == "some semester"
#     end

#     test "create_course/1 with invalid data returns error changeset" do
#       assert {:error, %Ecto.Changeset{}} = Bucknell.create_course(@invalid_attrs)
#     end

#     test "update_course/2 with valid data updates the course" do
#       course = course_fixture()
#       update_attrs = %{name: "some updated name", semester: "some updated semester"}

#       assert {:ok, %Course{} = course} = Bucknell.update_course(course, update_attrs)
#       assert course.name == "some updated name"
#       assert course.semester == "some updated semester"
#     end

#     test "update_course/2 with invalid data returns error changeset" do
#       course = course_fixture()
#       assert {:error, %Ecto.Changeset{}} = Bucknell.update_course(course, @invalid_attrs)
#       assert course == Bucknell.get_course!(course.id)
#     end

#     test "delete_course/1 deletes the course" do
#       course = course_fixture()
#       assert {:ok, %Course{}} = Bucknell.delete_course(course)
#       assert_raise Ecto.NoResultsError, fn -> Bucknell.get_course!(course.id) end
#     end

#     test "change_course/1 returns a course changeset" do
#       course = course_fixture()
#       assert %Ecto.Changeset{} = Bucknell.change_course(course)
#     end
#   end
# end
